[global/wm]
; Adjust the _NET_WM_STRUT_PARTIAL top value
; Used for top aligned bars
margin-bottom = 0

; Adjust the _NET_WM_STRUT_PARTIAL bottom value
; Used for bottom aligned bars
margin-top = 0

; include color
include-file = ~/.config/polybar/colors.ini

; include modules
include-file = ~/.config/polybar/modules.ini


[bar/main]
; monitors ---------------------------------------------------------------------
monitor = ${env:MONITOR:}


; modules ----------------------------------------------------------------------
modules-left = workspaces i3
modules-center = title
modules-right = alsa cpu temperature memory filesystem battery network date

; Number of spaces to add before/after each module
module-margin-left = 1
module-margin-right = 1

; position and size ------------------------------------------------------------

; Put the bar at the top of the screen
bottom = false

; Prefer fixed center position for the `modules-center` block
; When false, the center position will be based on the size of the other blocks.
fixed-center = true

; Dimension defined as pixel value (e.g. 35) or percentage (e.g. 50%),
; the percentage can optionally be extended with a pixel offset like so:
; 50%:-10, this will result in a width or height of 50% minus 10 pixels
width = 100%
height = 24

; Offset defined as pixel value (e.g. 35) or percentage (e.g. 50%)
; the percentage can optionally be extended with a pixel offset like so:
; 50%:-10, this will result in an offset in the x or y direction
; of 50% minus 10 pixels
offset-x = 0%
offset-y = 0%:

; Number of spaces to add at the beginning/end of the bar
padding = 2

; Value used for drawing rounded corners
; Note: This shouldn't be used together with border-size because the border
; doesn't get rounded
; Individual top/bottom values can be defined using:
;   radius-{top,bottom}
radius-top = 0.0
radius-bottom = 0.0

; Under-/overline pixel size and argb color
; Individual values can be defined using:
overline-size = 0
underline-size = 0


; color ------------------------------------------------------------------------
background = ${color.bg}
foreground = ${color.fg}

overline-color = ${color.bg}
underline-color = ${color.bg}


; fonts ------------------------------------------------------------------------
font-0 = "Misc Termsyn:size=10;2"
font-1 = "Wuncon Siji:size=10;2"
font-2 = "xos4 Terminus:size=10;1"


; tray -------------------------------------------------------------------------
tray-position = right

; If true, the bar will not shift its contents when the tray changes
tray-detached = false

; Tray icon max size
tray-maxsize = 16

; Background color for the tray container
; ARGB color (e.g. #f00, #ff992a, #ddff1023)
; By default the tray container will use the bar
; background color.
tray-background = ${color.bg}

; Tray offset defined as pixel value (e.g. 35) or percentage (e.g. 50%)
tray-offset-x = 0
tray-offset-y = 0

; Pad the sides of each tray icon
tray-padding = 0

; Scale factor for tray clients
tray-scale = 1.0


; i3 ---------------------------------------------------------------------------

; Value to be used to set the WM_NAME atom
; If the value is empty or undefined, the atom value
; will be created from the following template: polybar-[BAR]_[MONITOR]
; NOTE: The placeholders are not available for custom values
wm-name = i3

; Restack the bar window and put it above the selected window manager's root
; Fixes the issue where the bar is being draw on top of fullscreen window's
wm-restack = i3

; Only show workspaces defined on the same output as the bar
;
; Useful if you want to show monitor specific workspaces
; on different bars
pin-workspaces = false

; Sort the workspaces by index instead of the default
; sorting that groups the workspaces by output
;
index-sort = true


; other ------------------------------------------------------------------------

; Enable support for inter-process messaging
; See the Messaging wiki page for more details.
enable-ipc = true


[settings]
; The throttle settings lets the eventloop swallow up til X events
; if they happen within Y millisecond after first event was received.
; This is done to prevent flood of update event.
;
; For example if 5 modules emit an update event at the same time, we really
; just care about the last one. But if we wait too long for events to swallow
; the bar would appear sluggish so we continue if timeout
; expires or limit is reached.
throttle-output = 5
throttle-output-for = 10

; Time in milliseconds that the input handler will wait between processing events
throttle-input-for = 30

; Reload upon receiving XCB_RANDR_SCREEN_CHANGE_NOTIFY events
screenchange-reload = false
